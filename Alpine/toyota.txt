
// Коды имеющихся на руле кнопок
const int VOL_UP=1;
const int VOL_DN=2;
const int PREV_TR=3;
const int NEXT_TR=4;
const int MODE=5;

int wheelPin=A3; // аналоговый пин, на котором мы считываем сопротивление нажатой на руле кнопки
int wheelMod=12; // цифровой пин, на котором считываем состояние от кнопки MODE

int i=0;
int prevButton=0;

int alpPin=10; // цифровой пин, на который посылаем коды для магнитолы

// Массивы для передачи различных команд на магнитолу.
boolean volUp[48] = {1,1,0,1,0,1,1,1, 1,1,0,1,1,0,1,1, 1,0,1,0,1,0,1,1, 1,1,0,1,1,0,1,1, 1,1,0,1,0,1,1,0, 1,1,0,1,0,1,0,1};
boolean volDn[48] = {1,1,0,1,0,1,1,1, 1,1,0,1,1,0,1,1, 1,0,1,0,1,0,1,1, 0,1,1,0,1,1,0,1, 1,1,1,1,0,1,1,0, 1,1,0,1,0,1,0,1};
boolean mute[48] = {1,1,0,1,0,1,1,1, 1,1,0,1,1,0,1,1, 1,0,1,0,1,0,1,1, 1,0,1,0,1,1,0,1, 1,1,1,0,1,1,1,0, 1,1,0,1,0,1,0,1};
boolean pstUp[48] = {1,1,0,1,0,1,1,1, 1,1,0,1,1,0,1,1, 1,0,1,0,1,0,1,1, 1,0,1,0,1,0,1,1, 1,1,1,0,1,1,1,1, 0,1,0,1,0,1,0,1};
boolean pstDn[48] = {1,1,0,1,0,1,1,1, 1,1,0,1,1,0,1,1, 1,0,1,0,1,0,1,1, 0,1,0,1,0,1,0,1, 1,1,1,1,1,1,1,1, 0,1,0,1,0,1,0,1};
boolean source[48] = {1,1,0,1,0,1,1,1, 1,1,0,1,1,0,1,1, 1,0,1,0,1,0,1,1, 1,0,1,1,0,1,1,1, 1,1,0,1,1,0,1,1, 0,1,0,1,0,1,0,1};
boolean trkUp[48] = {1,1,0,1,0,1,1,1, 1,1,0,1,1,0,1,1, 1,0,1,0,1,0,1,1, 1,0,1,1,1,0,1,1, 1,1,0,1,1,0,1,0, 1,1,0,1,0,1,0,1};
boolean trkDn[48] = {1,1,0,1,0,1,1,1, 1,1,0,1,1,0,1,1, 1,0,1,0,1,0,1,1, 0,1,0,1,1,1,0,1, 1,1,1,1,1,0,1,0, 1,1,0,1,0,1,0,1};
boolean power[48] = {1,1,0,1,0,1,1,1, 1,1,0,1,1,0,1,1, 1,0,1,0,1,0,1,1, 0,1,1,1,0,1,1,1, 1,1,1,0,1,0,1,1, 0,1,0,1,0,1,0,1};
boolean entPlay[48] = {1,1,0,1,0,1,1,1, 1,1,0,1,1,0,1,1, 1,0,1,0,1,0,1,1, 0,1,0,1,0,1,1,1, 1,1,1,1,1,1,0,1, 0,1,0,1,0,1,0,1};
boolean bandProg[48] = {1,1,0,1,0,1,1,1, 1,1,0,1,1,0,1,1, 1,0,1,0,1,0,1,1, 0,1,1,0,1,0,1,1, 1,1,1,1,0,1,1,1, 0,1,0,1,0,1,0,1};

void setup() {
  pinMode(wheelPin, INPUT);
  pinMode(wheelMod, INPUT);
  pinMode(alpPin, OUTPUT);

  delay(100);
  //Serial.begin(9600);
}

int getR() { // Эта функция читает сопротивление с кнопок на руле и возвращает код нажатой кнопки, либо 0

  // читаем сопротивление (на самом деле напряжение, конечно) на аналоговом пине
  int r=analogRead(wheelPin);

  // Дебаг
  //Serial.println(r);

  // Ищем, какая кнопка соответствует этому сопротивлению. 
  // Данные значения сопротивлений подходят для TOYOTA, для других автомобилей числа будут другие.
  if (r>=220 && r<=280) return(VOL_UP); // 220-280
  if (r>=470 && r<=540) return(VOL_DN); // 470-540
  if (r>=70 && r<=130) return(PREV_TR); // 70-130
  if (r>=0 && r<=40) return(NEXT_TR); // 0-40

  // если ни одна из кнопок на пине wheelPin не нажата, проверяем нажата ли кнопка Mode
     r=digitalRead(wheelMod);
     if (r == LOW) return(MODE);

  // если и Mode не нажата, то возвращаем 0
     return (0);
}

// ОСНОВНОЙ ЦИКЛ
void loop() {
  int currButton=getR(); // заносим в переменную currButton код нажатой кнопки
  if (currButton!=prevButton) { // если значение поменялось с прошлого раза

    delay(10);
    currButton=getR(); // ждем 10ms и читаем еще раз, чтобы исключить "дребезг" кнопки

    if (currButton!=prevButton) { // если код кнопки точно поменялся с прошлого раза
      //Serial.println(currButton);
      prevButton=currButton;     // сохраняем новое значение в переменную prevButton

      // Посылаем команду на магнитолу (передаем в функцию alpineSend один из массивов данных, соответствующий нажатой кнопке)
      switch(currButton) {
       case VOL_UP: alpineSend(volUp); break;
       case VOL_DN: alpineSend(volDn); break;
       case PREV_TR: alpineSend(trkUp); break;
       case NEXT_TR: alpineSend(trkDn); break;
       case MODE: alpineSend(source); break;
       default: break;
     }
   }
  }
  delay(10);
}

// посылаем на магнитолу последовательность нулей и единичек.
// Массив этих данных  arr[] функция получает в качестве аргумента.

void alpineSend(boolean arr[]) {
  //first send 8ms high
  digitalWrite(alpPin, HIGH);
  delay(8);

  // send 4.5ms low
  digitalWrite(alpPin, LOW);
  delayMicroseconds(4500);

  for (int i = 0; i <= 47; i++) {
    //send bit for 0.5ms
    digitalWrite(alpPin, (arr[i]=1 ? HIGH : LOW));
    delayMicroseconds(500);

    // wait 0.5ms
    digitalWrite(alpPin, LOW);
    delayMicroseconds(500);
  }

  // send 41ms low
  digitalWrite(alpPin, LOW);
  delay(41); 
}
